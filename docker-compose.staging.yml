version: '3.8'

services:
  # Backend Service - Staging
  backend:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER}/full-stack-ecommerce-backend:${IMAGE_TAG:-latest}
    container_name: ecommerce-backend-staging
    restart: unless-stopped
    environment:
      - NODE_ENV=staging
      - PORT=5000
      - MONGO_URI=${MONGO_URI_STAGING}
      - JWT_SECRET=${JWT_SECRET_STAGING}
      - CORS_ORIGIN=${FRONTEND_URL_STAGING}
      - LOG_LEVEL=info
    ports:
      - "5000:5000"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - ecommerce-staging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.docker.compose.service=backend"
      - "environment=staging"

  # Frontend Service - Staging
  frontend:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER}/full-stack-ecommerce-frontend:${IMAGE_TAG:-latest}
    container_name: ecommerce-frontend-staging
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=${BACKEND_URL_STAGING}
      - REACT_APP_SOCKET_URL=${BACKEND_URL_STAGING}
      - REACT_APP_ENV=staging
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - ecommerce-staging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.docker.compose.service=frontend"
      - "environment=staging"

  # MongoDB Database - Staging
  mongodb:
    image: mongo:7.0
    container_name: ecommerce-mongodb-staging
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ecommerce_staging
    ports:
      - "27017:27017"
    volumes:
      - mongodb_staging_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - ecommerce-staging
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "environment=staging"

  # Redis for Session Storage - Staging
  redis:
    image: redis:7.2-alpine
    container_name: ecommerce-redis-staging
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_staging_data:/data
    networks:
      - ecommerce-staging
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "environment=staging"

  # Nginx Reverse Proxy - Staging
  nginx:
    image: nginx:alpine
    container_name: ecommerce-nginx-staging
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/staging.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_staging_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - ecommerce-staging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "environment=staging"

networks:
  ecommerce-staging:
    driver: bridge
    name: ecommerce-staging-network

volumes:
  mongodb_staging_data:
    driver: local
    labels:
      - "environment=staging"
  redis_staging_data:
    driver: local
    labels:
      - "environment=staging"
  nginx_staging_logs:
    driver: local
    labels:
      - "environment=staging"
