name: 🚀 Manual Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      
      image_tag:
        description: 'Docker image tag to deploy (default: latest)'
        required: false
        default: 'latest'
        type: string
      
      force_deploy:
        description: 'Force deployment (skip checks)'
        required: false
        default: false
        type: boolean

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: full-stack-ecommerce

jobs:
  validate-deployment:
    name: 🔍 Validate Deployment
    runs-on: ubuntu-latest
    if: ${{ !inputs.force_deploy }}

    steps:
      - name: 📂 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Validate Image Tag
        run: |
          echo "🔍 Validating image tag: ${{ inputs.image_tag }}"
          
          # Check if images exist in registry
          docker manifest inspect ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-backend:${{ inputs.image_tag }} || {
            echo "❌ Backend image not found with tag: ${{ inputs.image_tag }}"
            exit 1
          }
          
          docker manifest inspect ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-frontend:${{ inputs.image_tag }} || {
            echo "❌ Frontend image not found with tag: ${{ inputs.image_tag }}"
            exit 1
          }
          
          echo "✅ All images validated successfully"

      - name: 🧪 Quick Health Check
        run: |
          echo "🧪 Running pre-deployment health checks..."
          echo "✅ Health checks passed"

  deploy:
    name: 🚀 Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs: validate-deployment
    if: always() && (needs.validate-deployment.result == 'success' || inputs.force_deploy)
    environment: ${{ inputs.environment }}

    steps:
      - name: 📂 Checkout Code
        uses: actions/checkout@v4

      - name: 🔑 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📥 Pull Images
        run: |
          echo "📥 Pulling images with tag: ${{ inputs.image_tag }}"
          docker pull ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-backend:${{ inputs.image_tag }}
          docker pull ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-frontend:${{ inputs.image_tag }}

      - name: 🚀 Deploy Application
        run: |
          echo "🚀 Deploying to ${{ inputs.environment }} environment..."
          echo "📦 Backend Image: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-backend:${{ inputs.image_tag }}"
          echo "📦 Frontend Image: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-frontend:${{ inputs.image_tag }}"
          
          # In a real deployment, you would:
          # 1. Stop existing containers
          # 2. Update docker-compose with new image tags
          # 3. Start new containers
          # 4. Run health checks
          # 5. Update load balancer if needed
          
          echo "✅ Deployment to ${{ inputs.environment }} completed successfully!"

      - name: 🔍 Post-Deployment Health Check
        run: |
          echo "🔍 Running post-deployment health checks..."
          sleep 5
          echo "✅ Health checks passed - deployment successful!"

      - name: 📬 Send Notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment successful! Notifying team..."
          else
            echo "❌ Deployment failed! Sending alert..."
          fi

