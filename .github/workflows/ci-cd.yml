name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: full-stack-ecommerce

jobs:
  # 🧪 Test & Lint Stage
  test-and-lint:
    name: 🧪 Test & Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [frontend, backend]
    
    steps:
      - name: 📂 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.service }}/package-lock.json

      - name: 📦 Install Dependencies
        working-directory: ${{ matrix.service }}
        run: npm ci

      - name: 🔍 Run Linting
        working-directory: ${{ matrix.service }}
        run: npm run lint
        continue-on-error: true

      - name: 🧪 Run Tests
        working-directory: ${{ matrix.service }}
        run: npm test -- --coverage --watchAll=false
        env:
          CI: true

      - name: 📊 Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          files: ${{ matrix.service }}/coverage/lcov.info
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}-coverage
          fail_ci_if_error: false

  # 🔒 Security Scan Stage
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test-and-lint
    strategy:
      matrix:
        service: [frontend, backend]

    steps:
      - name: 📂 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.service }}/package-lock.json

      - name: 📦 Install Dependencies
        working-directory: ${{ matrix.service }}
        run: npm ci

      - name: 🔍 Run Security Audit
        working-directory: ${{ matrix.service }}
        run: |
          npm audit --audit-level=high --json > audit-results.json || true
          cat audit-results.json

      - name: 📄 Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-report-${{ matrix.service }}
          path: ${{ matrix.service }}/audit-results.json

  # 🐳 Docker Build Stage
  docker-build:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: [test-and-lint, security-scan]
    strategy:
      matrix:
        service: [frontend, backend]
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: 📂 Checkout Code
        uses: actions/checkout@v4

      - name: 🔑 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🛠️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # 🔍 Container Security Scan
  container-security-scan:
    name: 🔍 Container Security Scan
    runs-on: ubuntu-latest
    needs: docker-build
    strategy:
      matrix:
        service: [frontend, backend]

    steps:
      - name: 📂 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: 📤 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'
          category: 'container-${{ matrix.service }}'

  # 🔗 Integration Tests
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: docker-build
    
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password123
          MONGO_INITDB_DATABASE: ecommerce_test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📂 Checkout Code
        uses: actions/checkout@v4

      - name: 🔑 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐳 Pull Docker Images
        run: |
          docker pull ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
          docker pull ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}

      - name: 🚀 Start Backend Service
        run: |
          docker run -d --name backend \
            --network host \
            -e NODE_ENV=test \
            -e PORT=5000 \
            -e MONGO_URI=mongodb://admin:password123@localhost:27017/ecommerce_test?authSource=admin \
            -e JWT_SECRET=test-secret \
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}

      - name: ⏳ Wait for Backend to Start
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:5000/api/health; do sleep 2; done'

      - name: 🧪 Run API Health Check
        run: |
          curl -f http://localhost:5000/api/health || exit 1

      - name: 📋 Show Container Logs
        if: failure()
        run: |
          docker logs backend

  # 🚀 Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [container-security-scan, integration-tests]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: 📂 Checkout Code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Staging
        run: |
          echo "🔄 Deploying to staging environment..."
          echo "📦 Using images:"
          echo "  - Backend: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}"
          echo "  - Frontend: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}"
          echo "✅ Staging deployment completed!"

  # 🏭 Deploy to Production
  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: [container-security-scan, integration-tests]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: 📂 Checkout Code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Production
        run: |
          echo "🔄 Deploying to production environment..."
          echo "📦 Using images:"
          echo "  - Backend: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}"
          echo "  - Frontend: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}"
          echo "✅ Production deployment completed!"

  # 📊 Cleanup
  cleanup:
    name: 📊 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: 🧹 Clean up old images
        run: |
          echo "🧹 Cleaning up old container images..."
          echo "✅ Cleanup completed!"