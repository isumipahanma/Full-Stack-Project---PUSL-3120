version: '3.8'

services:
  # Backend Service - Production
  backend:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER}/full-stack-ecommerce-backend:${IMAGE_TAG:-latest}
    container_name: ecommerce-backend-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=5000
      - MONGO_URI=${MONGO_URI_PRODUCTION}
      - JWT_SECRET=${JWT_SECRET_PRODUCTION}
      - CORS_ORIGIN=${FRONTEND_URL_PRODUCTION}
      - LOG_LEVEL=warn
      - RATE_LIMIT_REQUESTS=100
      - RATE_LIMIT_WINDOW=900000
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    ports:
      - "5000:5000"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ecommerce-production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "com.docker.compose.service=backend"
      - "environment=production"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend Service - Production
  frontend:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER}/full-stack-ecommerce-frontend:${IMAGE_TAG:-latest}
    container_name: ecommerce-frontend-prod
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=${BACKEND_URL_PRODUCTION}
      - REACT_APP_SOCKET_URL=${BACKEND_URL_PRODUCTION}
      - REACT_APP_ENV=production
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - ecommerce-production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    labels:
      - "com.docker.compose.service=frontend"
      - "environment=production"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # MongoDB Database - Production (Clustered)
  mongodb:
    image: mongo:7.0
    container_name: ecommerce-mongodb-prod
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ecommerce_production
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    ports:
      - "27017:27017"
    volumes:
      - mongodb_production_data:/data/db
      - mongodb_production_config:/data/configdb
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - ./mongodb/production.conf:/etc/mongod.conf:ro
    networks:
      - ecommerce-production
    command: ["mongod", "--config", "/etc/mongod.conf"]
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "environment=production"
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Redis for Session Storage - Production (Clustered)
  redis:
    image: redis:7.2-alpine
    container_name: ecommerce-redis-prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    ports:
      - "6379:6379"
    volumes:
      - redis_production_data:/data
      - ./redis/production.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - ecommerce-production
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    labels:
      - "environment=production"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Load Balancer & Reverse Proxy - Production
  nginx:
    image: nginx:alpine
    container_name: ecommerce-nginx-prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/production.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_production_logs:/var/log/nginx
      - nginx_production_cache:/var/cache/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - ecommerce-production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    labels:
      - "environment=production"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: ecommerce-prometheus-prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus-production.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_production_data:/prometheus
    networks:
      - ecommerce-production
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    labels:
      - "environment=production"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: ecommerce-grafana-prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-worldmap-panel
    volumes:
      - grafana_production_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - ecommerce-production
    labels:
      - "environment=production"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  ecommerce-production:
    driver: bridge
    name: ecommerce-production-network
    driver_opts:
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.enable_icc: "true"

volumes:
  mongodb_production_data:
    driver: local
    labels:
      - "environment=production"
      - "backup=daily"
  mongodb_production_config:
    driver: local
    labels:
      - "environment=production"
  redis_production_data:
    driver: local
    labels:
      - "environment=production"
      - "backup=daily"
  nginx_production_logs:
    driver: local
    labels:
      - "environment=production"
  nginx_production_cache:
    driver: local
    labels:
      - "environment=production"
  prometheus_production_data:
    driver: local
    labels:
      - "environment=production"
      - "backup=weekly"
  grafana_production_data:
    driver: local
    labels:
      - "environment=production"
      - "backup=weekly"

